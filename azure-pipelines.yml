# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish Artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform'
            artifact: 'terraform-manifest-out'
            publishLocation: pipeline
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          displayName: Terraform Install
          inputs:
            terraformVersion: '0.13.5'
        - task: Bash@3
          displayName: Verify Terraform version
          inputs:
            targetType: 'inline'
            script: 'echo `terraform version`'
        # - task: TerraformCLI@0
        #   displayName: Terraform Init
        #   inputs:
        #     command: 'init'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        #     backendType: 'azurerm'
        #     backendAzureRmResourceGroupName: 'storage-rg'
        #     backendAzureRmStorageAccountName: 'deimos01storage'
        #     backendAzureRmContainerName: 'tfstatefiles'
        #     backendAzureRmKey: 'devops-terraform.tfstate'
        #     allowTelemetryCollection: false
        # - task: TerraformCLI@0
        #   displayName: Terraform Validate
        #   inputs:
        #     command: 'validate'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        #     allowTelemetryCollection: false
