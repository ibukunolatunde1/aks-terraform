# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  - group: demo-kv
  - name: DEV_ENVIRONMENT
    value: dev
  - name: QA_ENVIRONMENT
    value: qa

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish Artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform'
            artifact: 'terraform-manifest-out'
            publishLocation: pipeline
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          displayName: Terraform Install
          inputs:
            terraformVersion: '0.13.5'
        - task: Bash@3
          displayName: Terraform Init
          env:
            TF_STATE_ACCESS_KEY:  $(kv-str-access-key)  
          inputs:
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            targetType: 'inline'
            script: terraform init -backend-config="storage_account_name=deimos01storage" -backend-config="container_name=tfstatefiles" -backend-config="key=terraform.tfstate" -backend-config="access_key=$TF_STATE_ACCESS_KEY"
        - task: Bash@3
          displayName: Terraform validate
          inputs:
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            targetType: 'inline'
            script: terraform validate
        
  - stage: DeployAKSClusters
    jobs:
      - deployment: DeployDevAKSCluster
        displayName: DeployDevAKSCluster
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadSecureFile@1
                displayName: Download SSH Key
                name: sshkey
                inputs:
                  secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
              - task: Bash@3
                displayName: Terraform Init
                env:
                  TF_STATE_ACCESS_KEY:  $(kv-str-access-key)
                inputs:
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifest-out'
                  targetType: 'inline'
                  script: terraform init -backend-config="storage_account_name=deimos01storage" -backend-config="container_name=tfstatefiles" -backend-config="key=terraform.tfstate" -backend-config="access_key=$TF_STATE_ACCESS_KEY"
              - task: Bash@3
                displayName: Terraform plan
                env:
                  ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
                  ARM_CLIENT_ID:       $(kv-arm-client-id)
                  ARM_TENANT_ID:       $(kv-arm-tenant-id)
                  ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
                inputs:
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifest-out'
                  targetType: 'inline'
                  script: terraform plan -var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out=plan.tfplan
              - task: Bash@3
                displayName: Terraform apply
                env:
                  ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
                  ARM_CLIENT_ID:       $(kv-arm-client-id)
                  ARM_TENANT_ID:       $(kv-arm-tenant-id)
                  ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
                inputs:
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifest-out'
                  targetType: 'inline'
                  script: terraform apply -auto-approve plan.tfplan